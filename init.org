#+TITLE: Emacs Configuration
#+AUTHOR: Nguyễn Đức Hiếu
#+STARTUP: content
#+OPTIONS: num:3 ^:nil toc:nil
#+LATEX_CLASS: article
#+LATEX_HEADER: \usepackage[utf8]{vietnam}


* Preface
The whole thing is driven by the following =.emacs=

#+begin_example emacs-lisp :eval no
  (require 'org)

  (setq config-directory "/home/hieu/Emacs/emacs-config/")
  (org-babel-load-file
    (expand-file-name "init.org" config-directory))		   
#+end_example
 

* Initiation

#+BEGIN_SRC emacs-lisp
  
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))
  (package-initialize)
  
  ;; Use use-package to reduce load time
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                ;; if you use :diminish
  (require 'bind-key)                ;; if you use any :bind variant
  
  ;; Requice common-lisp library
  (require 'cl-lib)
  (require 'bind-key)
  
  

  ;; Auto-revert mode
  (global-auto-revert-mode 1)
  (setq auto-revert-interval 0.5)

  ;; Backup stored in /tmp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  ;; Delete old backup
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
	(current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
		 (> (- current (float-time (fifth (file-attributes file))))
		    week))
	(message "%s" file)
	(delete-file file))))

  ;; Startup
  (add-hook 'after-init-hook 
	    (lambda () 
	      (find-file (format "%s/%s" config-directory "init.org"))))


  ;; Information settings
  (setq user-full-name "Nguyễn Đức Hiếu"
	user-mail-address "hieunguyen31371@gmail.com")



#+END_SRC


* Appearence
** Interface

#+BEGIN_SRC emacs-lisp
  ;; Startup screen
  (require 'dashboard)
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'logo)

  ;; Initialize Emacs full screen 
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (global-set-key (kbd "<f11>") 'toggle-frame-maximized)

  ;; No startup messages on *scratch* buffer
  (setq initial-scratch-message "")

  ;; Cursor type
  (setq-default cursor-type 'bar)

  ;; Global font-lock mode
  (setq global-font-lock-mode t)


  ;; Enable line number and column number
  (setq column-number-mode t)

  ;; Disable tool bar, menu bar, and scroll bar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)

  ;; Paren mode
  (show-paren-mode t)
  (setq show-paren-delay 0)

  
#+END_SRC


** Theme and Faces

#+BEGIN_SRC emacs-lisp

  ;; Default font
  (require 'unicode-fonts)
  (unicode-fonts-setup)
  (set-frame-font "DejaVu Sans Mono 10" nil t)
  ;; Set themes
  (load-theme 'gruvbox t)
  (set-face-attribute 'font-lock-comment-face nil :foreground "#27ae60")
  (set-face-attribute 'mode-line nil :background "#427b58" :foreground "#ffffff")


#+END_SRC


* Editing
** General

#+BEGIN_SRC emacs-lisp
  ;; Ignore disabled command
  (setq disabled-command-function 'ignore)

  ;; I never want to enter overwrite mode
  (put 'overwrite-mode 'disabled t)

  ;; Delete marked region when input
  (delete-selection-mode 1)

  ;; Global mark ring
  (setq global-mark-ring-max 50000)

  ;; "Yes or no"? Too much writing
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Make comint promts read-only
  (setq comint-prompt-read-only t)

  ;; Auto close bracket insertion.
  (electric-pair-mode 1)
  (setq electric-pair-pairs '(
			      (?\" . ?\")
			      (?\( . ?\))
			      (?\{ . ?\})
			      ) )

  (when (fboundp 'electric-indent-mode) (electric-indent-mode -1))

  ;; Set kill ring size
  (setq global-mark-ring-max 50000)

  ;; Bound undo to C-z
  (global-set-key (kbd "C-z") 'undo)

  ;; Expand region with C-' and return to original position with C-g
  (require 'expand-region)
  (global-set-key (kbd "C-'") 'er/expand-region)

  (defadvice keyboard-quit (before collapse-region activate)
    (when (memq last-command '(er/expand-region er/contract-region))
      (er/contract-region 0)))

  ;; Comment Do-What-I-Mean
  (defun comment-dwim-mod ()	       	
    "Like `comment-dwim', but toggle comment if cursor is not at end of line.
  URL `http://ergoemacs.org/emacs/emacs_toggle_comment_by_line.html'
  Version 2016-10-25"
    (interactive)
    (if (region-active-p)
      (comment-dwim nil)
      (let ((-lbp (line-beginning-position))
  	    (-lep (line-end-position)))
  	(if (eq -lbp -lep)
  	    (progn
  	      (comment-dwim nil))
  	  (if (eq (point) -lep)
  	      (progn
  		(comment-dwim nil))
  	    (progn
  	      (comment-or-uncomment-region -lbp -lep)
  	      (forward-line )))))))
  
  (global-set-key (kbd "C-;") 'comment-dwim-mod) 
  
  ;; Multi-cursor
  (require 'multiple-cursors)
  (global-set-key (kbd "C-?") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-N") 'mc/insert-numbers)

  ;; In case commands behavior is messy with multiple-cursors,
  ;; check your ~/.emacs.d/.mc-lists.el
  (defun mc/check-command-behavior ()
    "Open ~/.emacs.d/.mc-lists.el 
  So you can fix the list for run-once and run-for-all multiple-cursors commands."
    (interactive)
    (find-file "~/.emacs.d/.mc-lists.el"))

  ;; Define function: fill character to 80
  (defun fill-to-end (char)
    (interactive "cFill Character:")
    (save-excursion
      (end-of-line)
      (while (< (current-column) 80)
	(insert-char char))))

  ;; Eval and replace lisp expression
  (defun fc-eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (prin1 (eval (read (current-kill 0)))
	   (current-buffer)))
  (global-set-key (kbd "C-c e") 'fc-eval-and-replace)

  ;; Move line/region up/down
  (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
	  (exchange-point-and-mark))
      (let ((column (current-column))
	    (text (delete-and-extract-region (point) (mark))))
	(forward-line arg)
	(move-to-column column t)
	(set-mark (point))
	(insert text)
	(exchange-point-and-mark)
	(setq deactivate-mark nil)))
     (t
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
	(forward-line)
	(when (or (< arg 0) (not (eobp)))
	  (transpose-lines arg))
	(forward-line -1)))))

  (defun move-text-down (arg)
    "Move region (transient-mark-mode active) or current line
  arg lines down."
    (interactive "*p")
    (move-text-internal arg))

  (defun move-text-up (arg)
    "Move region (transient-mark-mode active) or current line
  arg lines up."
    (interactive "*p")
    (move-text-internal (- arg)))

  (global-set-key [\M-up] 'move-text-up)
  (global-set-key [\M-down] 'move-text-down)

  ;; Srink whitespace, simple but useful
  (require 'shrink-whitespace)
  (global-set-key (kbd "C-SPC") 'shrink-whitespace)


#+END_SRC

** Company
Company is a completion mechanism that is very flexible 

#+BEGIN_SRC emacs-lisp
  ;; Code completion
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)

  (setq company-selection-wrap-around t
	company-tooltip-align-annotations t
	company-idle-delay 0.36
	company-minimum-prefix-length 2
	company-tooltip-limit 10)
  
  ;; Press <F1> to show the documentation buffer and press C-<F1> to jump to it
  (defun my/company-show-doc-buffer ()
    "Temporarily show the documentation buffer for the selection."
    (interactive)
    (let* ((selected (nth company-selection company-candidates))
	   (doc-buffer (or (company-call-backend 'doc-buffer selected)
			   (error "No documentation available"))))
      (with-current-buffer doc-buffer
	(goto-char (point-min)))
      (display-buffer doc-buffer t)))
  
  (define-key company-active-map (kbd "C-<f1>") #'my/company-show-doc-buffer)
  
  ;; math backend, this will input math symbols everywhere except in 
  ;; LaTeX math evironments
  (require 'company-math)
  (add-to-list 'company-backends 'company-math-symbols-unicode)
  
  ;; Make scroll bar more visible
  (set-face-attribute 'company-scrollbar-bg nil :background "tan")
  (set-face-attribute 'company-scrollbar-fg nil :background "darkred")
  (set-face-attribute 'company-tooltip nil :background "#f9f5d7" :foreground "#1d2021")
  (set-face-attribute 'company-tooltip-selection nil 
  		      :background "#b57614" :foreground "#1d2021" :weight 'bold)
  (set-face-attribute 'company-tooltip-common nil :foreground "#458588" :weight 'bold :underline nil)
  (set-face-attribute 'company-tooltip-common-selection nil :foreground "#f9f5d7" 
  		      :weight 'bold :underline nil)
  (set-face-attribute 'company-preview-common nil
  		      :foreground "#1d2021" :background "#f9f5d7" :weight 'bold)
  
  ;; Quick help show up in a popup
  ;; (company-quickhelp-mode 1)
  ;; (setq company-quickhelp-delay nil)(set-face-attribute 'company-tooltip-annotation nil :foreground "#504945")
  ;; (setq company-quickhelp-color-background "#f9f5d7")
  ;; (setq company-quickhelp-color-foreground "#1d2021")

  ;; (eval-after-load 'company
  ;; '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))

#+END_SRC

** Yasnippets

#+BEGIN_SRC emacs-lisp

  ;; Enable Yasnippets
  (require 'yasnippet)
  (setq yas-snippet-dirs (format "%s/%s" config-directory "Snippets"))

  (yas-global-mode 1)
  
  (global-set-key (kbd "<C-tab>") 'yas-insert-snippet)


  ;; It will test whether it can expand, if yes, cursor color -> green.
  (defun yasnippet-can-fire-p (&optional field)
    (interactive)
    (setq yas--condition-cache-timestamp (current-time))
    (let (templates-and-pos)
      (unless (and yas-expand-only-for-last-commands
		   (not (member last-command yas-expand-only-for-last-commands)))
	(setq templates-and-pos (if field
				    (save-restriction
				      (narrow-to-region (yas--field-start field)
							(yas--field-end field))
				      (yas--templates-for-key-at-point))
				  (yas--templates-for-key-at-point))))

      (set-cursor-color (if (and templates-and-pos (first templates-and-pos)) 
			    "green" "#ffffaf"))))
  (add-hook 'post-command-hook 'yasnippet-can-fire-p)
  

  (yas-reload-all)
  ;; With backquote warnings:
  ;; (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

#+END_SRC

** Key Chord
Im currently testing this for command that is too good but lack a good keybinding
May combind this with yasnippet

#+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (key-chord-define-global "??" 'mc/mark-all-like-this)
  (key-chord-mode +1)

#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp

  (require 'helm)
  (require 'helm-config)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (bind-key* (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)   ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action)              ; list actions using C-z

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq 
   helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
   helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
   helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
   helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
   helm-ff-file-name-history-use-recentf t
   helm-echo-input-in-header-line        t)


  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 30)
  (helm-autoresize-mode 1)

  (helm-mode 1)

  ;; Use helm for some common task
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (setq helm-M-x-fuzzy-match t)


  ;; Use "C-:" to switch to Helm interface during companying
  (require 'helm-company)
  (eval-after-load 'company
    '(progn
       (define-key company-mode-map (kbd "C-:") 'helm-company)
       (define-key company-active-map (kbd "C-:") 'helm-company))) 
  

#+END_SRC

** Ag
An Emacs frontend to The Silver Searcher [[http://agel.readthedocs.org/en/latest/][(Documentation)]]

#+BEGIN_SRC emacs-lisp

  (require 'ag)

  ;; Truncate long results
  (add-hook 'ag-mode-hook (lambda () (setq truncate-lines t)))

  ;; Add highlighting
  (setq ag-highlight-search t)
  (set-face-attribute 'ag-match-face nil 
		      :weight 'bold
		      :foreground "#fabd2f")

  ;; Set ag to reuse the same buffer
  (setq ag-reuse-buffers 't)

#+END_SRC

** Polymode

#+BEGIN_SRC emacs-lisp

  (require 'polymode)
  (require 'poly-R)
  (require 'poly-markdown)
  (require 'poly-org)

  (add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.Snw$" . poly-noweb+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rnw$" . poly-noweb+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode))
  (add-to-list 'auto-mode-alist '("\\.rapport$" . poly-rapport-mode))
  (add-to-list 'auto-mode-alist '("\\.Rhtml$" . poly-html+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rbrew$" . poly-brew+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rcpp$" . poly-r+c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cppR$" . poly-c++r-mode))

#+END_SRC

** Magical TAB
Make TAB the magical button that almost always do the right thing
- Indent the current line,
- If there is a yasnippet to expand, expand it, even if this means aborting a company completion (I don't use abbreviations much, so no abbreviation support yet),
- If a company completion is ongoing, complete with the selected item,
- Otherwise try to use company to start autocomplete,
- If there is nothing to autocomplete and we're in a yasnippet placeholder, skip to the next placeholder.
Probs to [[https://emacs.stackexchange.com/a/7925/15689][Kristóf Marussy]]

#+BEGIN_SRC emacs-lisp
  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
	(backward-char 1)
	(if (looking-at "\\.") t
	  (backward-char 1)
	  (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (cond
     ((minibufferp)
      (minibuffer-complete))
     (t
      (indent-for-tab-command)
      (if (or (not yas/minor-mode)
	      (null (do-yas-expand)))
	  (if (check-expansion)
	      (progn
		(company-manual-begin)
		(if (null company-candidates)
		    (progn
		      (company-abort)
		      (indent-for-tab-command)))))))))

  (defun tab-complete-or-next-field ()
    (interactive)
    (if (or (not yas/minor-mode)
	    (null (do-yas-expand)))
	(if company-candidates
	    (company-complete-selection)
	  (if (check-expansion)
	      (progn
		(company-manual-begin)
		(if (null company-candidates)
		    (progn
		      (company-abort)
		      (yas-next-field))))
	    (yas-next-field)))))

  (defun expand-snippet-or-complete-selection ()
    (interactive)
    (if (or (not yas/minor-mode)
	    (null (do-yas-expand))
	    (company-abort))
	(company-complete-selection)))

  (defun abort-company-or-yas ()
    (interactive)
    (if (null company-candidates)
	(yas-abort-snippet)
      (company-abort)))

  (global-set-key [tab] 'tab-indent-or-complete)
  (global-set-key (kbd "TAB") 'tab-indent-or-complete)
  (global-set-key [(control return)] 'company-complete-common)

  (define-key company-active-map [tab] 'expand-snippet-or-complete-selection)
  (define-key company-active-map (kbd "TAB") 'expand-snippet-or-complete-selection)

  (define-key yas-minor-mode-map [tab] nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)

  (define-key yas-keymap [tab] 'tab-complete-or-next-field)
  (define-key yas-keymap (kbd "TAB") 'tab-complete-or-next-field)
  (define-key yas-keymap [(control tab)] 'yas-next-field)
  (define-key yas-keymap (kbd "C-g") 'abort-company-or-yas)


#+END_SRC

** Focus
[[https://github.com/larstvei/Focus][Focus]] provides focus-mode that dims the text of surrounding sections
#+BEGIN_SRC emacs-lisp

(use-package focus
  :ensure t
  :bind ("<f4>" . focus-mode))


#+END_SRC
* Utilities
** Org-mode
Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.
See [[http://orgmode.org/][here]].
*** Setting up

#+BEGIN_SRC emacs-lisp
  ;; Word-wrap
  (add-hook 'org-mode-hook (lambda () (setq word-wrap t)))

  ;; Omit the headline-asterisks except the last one:
  (setq org-hide-leading-stars t)

  ;; Auto indent normally
  (setq org-src-tab-acts-natively t)

  ;; Enable shift selection
  (setq org-support-shift-select t)

  ;; Fontification
  (setq org-src-fontify-natively t)
  (set-face-attribute 'org-level-1 nil :weight 'bold :height 120)
  (set-face-attribute 'org-level-2 nil :weight 'bold)
  (set-face-attribute 'org-block nil :foreground "#ffffff")  
  (set-face-attribute 'org-block-begin-line nil :foreground "#d5c4a1")
  (set-face-attribute 'org-block-end-line nil :foreground "#d5c4a1")

#+END_SRC

*** Org-babel
Babel is Org-mode's ability to execute source code within Org-mode documents.

#+BEGIN_SRC emacs-lisp
  ;; Active Babel languages:
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (emacs-lisp . nil)
     ))
#+END_SRC

** Pdf-tools 
PDF Tools is, among other things, a replacement of DocView for PDF files. 
The key difference is, that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.

#+BEGIN_SRC emacs-lisp
  
  (pdf-tools-install)
  (setq pdf-view-display-size "fit-page"
	auto-revert-interval 0
	ess-pdf-viewer-pref "emacsclient"
	TeX-view-program-selection '((output-pdf "PDF Tools"))
	pdf-view-midnight-colors '("#fffff8" . "#111111"))

#+END_SRC

** Magit
Magit is an interface to the version control system Git, implemented as an Emacs package. 
Magit aspires to be a complete Git porcelain. [[https://magit.vc/][See here]]

#+BEGIN_SRC emacs-lisp

  ;; Set magit-status to F9
  (global-set-key (kbd "<f9>") 'magit-status)
  ;; Currently magit cause some error when auto revert mode is on
  (setq magit-auto-revert-mode nil)

#+END_SRC  

* Languages
** R
*** Setting up
#+BEGIN_SRC emacs-lisp

  (require 'ess-site)
  (require 'ess-rutils)

  ;; Describe object
  ;; (setq ess-R-describe-object-at-point-commands
  ;; 	'(("str(%s)")
  ;; 	  ("print(%s)")
  ;; 	  ("summary(%s, maxsum = 20)")))

#+END_SRC

*** Appearance
#+BEGIN_SRC emacs-lisp

  ;; Truncate long lines
  (add-hook 'special-mode-hook (lambda () (setq truncate-lines t)))
  (add-hook 'inferior-ess-mode-hook (lambda () (setq truncate-lines t)))


  ;; Indentation style
  (setq ess-default-style 'RStudio)

  ;; Disable syntax highlight in inferior buffer
  (add-hook 'inferior-ess-mode-hook (lambda () (font-lock-mode 0)) t)
    
  ;; ESS syntax highlight  
  (setq ess-R-font-lock-keywords 
	'((ess-R-fl-keyword:modifiers . t)
	  (ess-R-fl-keyword:fun-defs . t)
	  (ess-R-fl-keyword:keywords . t)
	  (ess-R-fl-keyword:assign-ops . t)
	  (ess-R-fl-keyword:constants . t)
	  (ess-fl-keyword:fun-calls . t)
	  (ess-fl-keyword:numbers . t)
	  (ess-fl-keyword:operators . t)
	  (ess-fl-keyword:delimiters . t)
	  (ess-fl-keyword:= . t)
	  (ess-R-fl-keyword:F&T . t)
	  (ess-R-fl-keyword:%op% . t)
	  )
	)

#+END_SRC
*** Code completion
#+BEGIN_SRC emacs-lisp
  ;; Eldoc mode for function arguments hints
  (require 'ess-eldoc)  

  (setq ess-use-company 'script-only)
  (setq ess-tab-complete-in-script t)	;; Press <tab> inside functions for completions


#+END_SRC

*** Functions and key bindind
#+BEGIN_SRC emacs-lisp
  ;; Returm C-c h as prefix to Helm"
  (defun ess-map-control-h-to-helm ()
    "Return C-c h to helm prefix instead of ess-handy-commands"
    (interactive)
    (local-unset-key (kbd "C-c h"))
    (local-set-key (kbd "C-c h") 'helm-command-prefix))

  (add-hook 'ess-mode-hook 'ess-map-control-h-to-helm)

  ;; Remap "<-" key to M-- instead of smart bind to "_"
  (ess-toggle-underscore nil)
  (define-key ess-mode-map (kbd "M--") 'ess-smart-S-assign)
  (define-key inferior-ess-mode-map (kbd "M--") 'ess-smart-S-assign)

  ;; Hot key C-S-m for pipe operator in ESS
  ;; Temporary removed and use Yasnippet instead
  (defun then_R_operator ()
    "R - %>% operator or 'then' pipe operator"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (just-one-space 1))

  (define-key ess-mode-map (kbd "C-S-m") 'then_R_operator)
  (define-key inferior-ess-mode-map (kbd "C-S-m") 'then_R_operator)



  (defun ess-rmarkdown ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
	(ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
	(let* ((sprocess (ess-get-process ess-current-process-name))
	       (sbuffer (process-buffer sprocess))
	       (buf-coding (symbol-name buffer-file-coding-system))
	       (R-cmd
		(format "library(rmarkdown); rmarkdown::render(\"%s\")"
			buffer-file-name)))
	  (message "Running rmarkdown on %s" buffer-file-name)
	  (ess-execute R-cmd 'buffer nil nil)
	  (switch-to-buffer rmd-buf)
	  (ess-show-buffer (buffer-name sbuffer) nil)))))

  (define-key polymode-mode-map "\M-ns" 'ess-rmarkdown)

  (defun ess-rshiny ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
	(ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
	(let* ((sprocess (ess-get-process ess-current-process-name))
	       (sbuffer (process-buffer sprocess))
	       (buf-coding (symbol-name buffer-file-coding-system))
	       (R-cmd
		(format "library(rmarkdown);rmarkdown::run(\"%s\")"
			buffer-file-name)))
	  (message "Running shiny on %s" buffer-file-name)
	  (ess-execute R-cmd 'buffer nil nil)
	  (switch-to-buffer rmd-buf)
	  (ess-show-buffer (buffer-name sbuffer) nil)))))

  (define-key polymode-mode-map "\M-nr" 'ess-rshiny)

#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (require 'elpy)
  ;; Do not enable elpy snippets for now
  (delete 'elpy-module-yasnippet elpy-modules)

  ;; Enable elpy
  (elpy-enable)				
  (with-eval-after-load 'elpy (flymake-mode -1))
  (setq elpy-rpc-python-command "python3")
  (elpy-use-cpython "python3")
  (setq elpy-rpc-backend "jedi")


  ;; Enable company
  (add-hook 'python-mode-hook 'company-mode)
  (add-hook 'inferior-python-mode-hook 'company-mode)

  ;; Keybinding
  (define-key python-mode-map (kbd "C-c C-c") 'elpy-shell-send-current-statement)
  (define-key python-mode-map (kbd "C-c <RET>") 'elpy-shell-send-region-or-buffer)

  ;; Ill put flycheck configurations here temporary
  ;; (with-eval-after-load 'flycheck
  ;; (flycheck-pos-tip-mode))

  ;; (defun flymake-to-flycheck ()
  ;;    "Change from flymake to flycheck when flymake is on."
  ;;    (interactive)
  ;;    (flymake-mode-off)
  ;;    (flycheck-mode 1))

  ;; (add-hook 'python-mode-hook 'flymake-to-flycheck)


  ;; Fix:Calling ‘run-python’ with ‘python-shell-interpreter’ set to "python3"
  ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=24401
  ;; This will be fixed in the next version of Emacs
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
	  (python-shell-completion-native-output-timeout
	   python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_")))

#+END_SRC

** \LaTeX{}
#+BEGIN_SRC emacs-lisp
  (load "auctex.el" nil t t)

  ;; Appearance
  (require 'font-latex)

  ;; Preview-latex
  ;; (set-default 'preview-scale-function 1.2)

  ;; Math mode
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  ;; (set-face-attribute 'font-latex-math-face nil :foreground "#ffffff")

  ;; Enable query for master file
  (setq-default TeX-master nil)		    
  (setq TeX-auto-save t			    
	TeX-parse-self t
	TeX-save-query nil
	TeX-PDF-mode t	    
	font-latex-fontify-sectioning 'color
	font-latex-fontify-script nil)    

  ;; Word-wrap
  (add-hook 'TeX-mode-hook (lambda () (setq word-wrap t)))

  ;; Completion
  (require 'company-auctex)
  (company-auctex-init)

#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp

  (require 'shx)
  (add-hook 'shell-mode-hook #'shx-mode)

  ;; Keybinding for terminal
  (global-set-key [f2] 'shell)

  ;; Company
  (add-to-list 'company-backends '(company-shell company-shell-env company-fish-shell))

#+END_SRC

** GNUplot
Gnuplot is a portable command-line driven graphing utility for Linux, OS/2, MS Windows, OSX, VMS, and many other platforms.
/I may expand this later to use with org-mode/

#+BEGIN_SRC emacs-lisp
  (require 'gnuplot-mode)
  ;; automatically open files ending with .gp or .gnuplot in gnuplot mode
  (setq auto-mode-alist 
	(append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))
#+END_SRC



* Draft
Settings in this section are not yet organized but are being used, mostly for testing purposes

** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.

#+BEGIN_SRC emacs-lisp
  (require 'helpful)
#+END_SRC
** Use-package
The [[https://github.com/jwiegley/use-package][use-package]] macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy.
