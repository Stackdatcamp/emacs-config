#+TITLE: Emacs Configuration
#+AUTHOR: Nguyễn Đức Hiếu
#+STARTUP: content
#+OPTIONS: num:3 ^:nil toc:nil
#+LATEX_CLASS: koma-article
#+LaTeX_CLASS_OPTIONS: [a4paper, 11pt] 
#+LATEX_HEADER: \usepackage[utf8]{vietnam}

* Prerequisite

The Ubuntu repo for emacs version is
[[https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa]]

The whole thing is driven by the following =.emacs=
 
#+BEGIN_EXAMPLE emacs-lisp

(require 'org)

(setq config-directory "~/Documents/Emacs/emacs-config/")
(org-babel-load-file
(expand-file-name "init.org" config-directory))		   

#+END_EXAMPLE


* Initiation
** Setup and bootstrap
#+BEGIN_SRC emacs-lisp
    ;; Increase garbage collection threshold to improve emacs init time
    (setq gc-cons-threshold 100000000)
    (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))


    (require 'package)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    ;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    ;; (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))

    (package-initialize)

    ;; Bootstrap `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    ;; Use use-package to reduce load time
    (eval-when-compile
      (require 'use-package)
      )

    (setq use-package-always-ensure t
	  use-package-always-defer-install t
	  use-package-verbose t)

    (use-package use-package-chords
      :ensure key-chord
      :config (key-chord-mode 1))

    (use-package diminish)
    (use-package hydra)

    ;; Requice common-lisp library
    (require 'cl-lib)

    ;; Auto-revert mode
    (global-auto-revert-mode 1)
    (setq auto-revert-interval 0.5)

    ;; Backup stored in /tmp
    (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" , temporary-file-directory t)))

    ;; Delete old backup
    (message "Deleting old backup files...")
    (let ((week (* 60 60 24 7))
	  (current (float-time (current-time))))
      (dolist (file (directory-files temporary-file-directory t))
	(when (and (backup-file-name-p file)
		   (> (- current (float-time (nth 5 (file-attributes file))))
		      week))
	  (message "%s" file)
	  (delete-file file))))

    ;; Information settings
    (setq user-full-name "Nguyễn Đức Hiếu"
	  user-mail-address "hieunguyen31371@gmail.com")

    ;; Set emacs as a client
    ;; (server-start)

#+END_SRC

** Emacsclient

#+BEGIN_SRC emacs-lisp
  (use-package server
    :config
    (unless (server-running-p)
      (server-start)))
#+END_SRC
** Better Defaults

#+BEGIN_SRC emacs-lisp
  ;; Everything utf-8
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)


  ;; Set some annoying command disabled
  (unbind-key "<insert>") 		;overwrite-mode
  (unbind-key "C-x C-z")		;suspend-frame
  (unbind-key "C-x m")			;compose-mail

  ;; Delete marked region when input
  (delete-selection-mode 1)

  ;; Pressing TAB indents first then complete
  (setq tab-always-indent 'complete)

  ;; Global mark ring
  (setq global-mark-ring-max 50000)

  ;; Auto save abbreviation
  (setq save-abbrevs 'silently)

  ;; "Yes or no"? Too much writing
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Make comint promts read-only
  (setq comint-prompt-read-only t)

  ;; Set kill ring size
  (setq global-mark-ring-max 50000)

  ;; Bound undo to C-z
  (global-set-key (kbd "C-z") 'undo)


  ;; Scrolling
  (setq scroll-step 1) ; keyboard scroll one line at a time
  (setq scroll-preserve-screen-position t)
  (setq scroll-conservatively 101)


#+END_SRC


* Appearence
** Interface

#+BEGIN_SRC emacs-lisp

  ;; Startup screen
  (setq inhibit-startup-screen t)

  ;; Global truncate line, except in text-based modes
  (set-default 'truncate-lines t)
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

  ;; Initialize Emacs full screen 
  ;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (global-set-key (kbd "<f11>") 'toggle-frame-maximized)

  ;; No startup messages on *scratch* buffer
  (setq initial-scratch-message "")

  ;; Cursor type
  (setq-default cursor-type 'hbar
		cursor-in-non-selected-windows nil)

  ;; Global font-lock mode
  (setq global-font-lock-mode t)


  ;; Enable line number and column number
  (setq column-number-mode t)

  ;; Display line number
  (add-hook 'text-mode-hook (lambda () (setq display-line-numbers 'relative)))
  (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers 'relative)))
  (add-hook 'conf-mode-hook (lambda () (setq display-line-numbers 'relative)))
  (setq-default display-line-numbers-width 4)
  (setq-default display-line-numbers-widen t)

  ;; Disable tool bar, menu bar, and scroll bar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)

  ;; Diminish some modes
  (diminish 'visual-line-mode)


#+END_SRC

*** Smooth-scrolling

#+BEGIN_SRC emacs-lisp

  ;; Smooth scrolling
  (use-package smooth-scrolling 
    :config
    (smooth-scrolling-mode t))

#+END_SRC

** Aesthetics
*** Faces
[[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] is a beautiful programming font with Unicode supports
Install it on Ubuntu by the following script:

#+BEGIN_EXAMPLE sh

[ -d /usr/share/fonts/opentype ] || sudo mkdir /usr/share/fonts/opentype
sudo git clone --depth 1 --branch release https://github.com/adobe-fonts/source-code-pro.git /usr/share/fonts/opentype/scp
sudo fc-cache -f -v

#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp

    ;; Default font
    (when (member "Source Code Pro" (font-family-list))
      (set-frame-font "Source Code Pro 10" nil t))


    ;; Set themes
    (use-package gruvbox-theme
      :init
      :config
      (load-theme 'gruvbox t)
      ;; (set-face-attribute 'font-lock-comment-face nil :foreground "#27ae60")
      (set-face-attribute 'mode-line nil :box '(:line-width 2 :color "#665c54"))
(set-face-attribute 'mode-line-inactive nil :box '(:line-width 2 :color "#3c3836"))

      )

    (use-package rainbow-delimiters
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      ;; Custom pallete
      (custom-set-faces
       '(rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
       '(rainbow-delimiters-depth-2-face ((t (:foreground "Darkolivegreen3"))))
       '(rainbow-delimiters-depth-3-face ((t (:foreground "IndianRed"))))
       '(rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
       '(rainbow-delimiters-depth-5-face ((t (:foreground "Gold"))))
       '(rainbow-delimiters-depth-6-face ((t (:foreground "DeepPink"))))
       '(rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
       '(rainbow-delimiters-depth-8-face ((t (:foreground "sienna1")))))
      )

      (use-package popup
      :config
      (set-face-attribute 'popup-tip-face nil 
			  :foreground "#1d2021"
			  :background "#f9f5d7")
      )

#+END_SRC

*** Highlight current line

#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :config
    (add-hook 'prog-mode-hook 'hl-line-mode)
    (add-hook 'text-mode-hook 'hl-line-mode)
    )
#+END_SRC
*** Mode-line

#+BEGIN_SRC emacs-lisp

  (use-package spaceline-config
    :ensure spaceline
    :config
    (setq spaceline-window-numbers-unicode t)
    (setq spaceline-workspace-numbers-unicode t)
    (setq powerline-height 20)
    (spaceline-helm-mode)
    (spaceline-info-mode)
    (setq-default
     powerline-default-separator 'wave
     spaceline-flycheck-bullet "❖ %s"
     spaceline-separator-dir-left '(left . left)
     spaceline-separator-dir-right '(right . right))
    (spaceline-install
      'main
      '((buffer-modified :when buffer-read-only
			 :face spaceline-read-only)
	(buffer-modified :when (and (buffer-modified-p) (not buffer-read-only))
			 :face spaceline-modified)
	(buffer-modified :when (and (not (buffer-modified-p)) (not buffer-read-only))
			 :face spaceline-evil-visual)
	((remote-host buffer-id) :face highlight-face)
	(projectile-root)
	)
      '((selection-info :face region :when mark-active)
	(major-mode)
	(process :when active)
	(line-column)
	(global :when active)
	(buffer-position)
	(workspace-number :face highlight)
	))
    (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main))))
    )

  (defun my-vc-git-mode-line-string (orig-fn &rest args)
    "Replace Git in modeline with font-awesome git icon via ORIG-FN and ARGS."
    (let ((str (apply orig-fn args)))
      (concat [#xe0a0] " " (substring-no-properties str 4))))

  (advice-add #'vc-git-mode-line-string :around #'my-vc-git-mode-line-string)

#+END_SRC
* Editing
** Functions

#+BEGIN_SRC emacs-lisp
  ;; Rename file and buffer
  ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
	  (filename (buffer-file-name)))
      (if (not filename)
	  (message "Buffer '%s' is not visiting a file!" name)
	(if (get-buffer new-name)
	    (message "A buffer named '%s' already exists!" new-name)
	  (progn
	    (rename-file filename new-name 1)
	    (rename-buffer new-name)
	    (set-visited-file-name new-name)
	    (set-buffer-modified-p nil))))))

  ;; Define function: fill character to 80
  (defun fill-to-end (char)
    (interactive "HcFill Character:")
    (save-excursion
      (end-of-line)
      (while (< (current-column) 80)
	(insert-char char))))

  ;; Eval and replace lisp expression
  (defun fc-eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (prin1 (eval (read (current-kill 0)))
	   (current-buffer)))
  (global-set-key (kbd "C-c e") 'fc-eval-and-replace)

  ;; Move line/region up/down
  (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
	  (exchange-point-and-mark))
      (let ((column (current-column))
	    (text (delete-and-extract-region (point) (mark))))
	(forward-line arg)
	(move-to-column column t)
	(set-mark (point))
	(insert text)
	(exchange-point-and-mark)
	(setq deactivate-mark nil)))
     (t
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
	(forward-line)
	(when (or (< arg 0) (not (eobp)))
	  (transpose-lines arg))
	(forward-line -1)))))

  (defun move-text-down (arg)
    "Move region (transient-mark-mode active) or current line
  arg lines down."
    (interactive "*p")
    (move-text-internal arg))

  (defun move-text-up (arg)
    "Move region (transient-mark-mode active) or current line
  arg lines up."
    (interactive "*p")
    (move-text-internal (- arg)))

  (global-set-key [\M-up] 'move-text-up)
  (global-set-key [\M-down] 'move-text-down)


#+END_SRC

** Smartparens

#+BEGIN_SRC emacs-lisp

  (use-package smartparens-config
    :ensure smartparens
    :diminish smartparens-mode
    :config
    (smartparens-global-mode 1)
    (add-hook 'comint-mode-hook 'smartparens-mode)

    (defhydra hydra-smartparens (:idle 1 :hint nil)
      "
  Sexps (quit with _q_)

  ^Nav^            ^Barf/Slurp^          ^Depth^
  ^---^------------^----------^----------^-----^-----------------------
  _f_: forward     _s_:  slurp forward   _R_:      splice
  _b_: backward    _S_:  barf forward    _r_:      raise
  _a_: begin       _d_:  slurp backward  _<up>_:   raise backward
  _e_: end         _D_:  barf backward   _<down>_: raise forward
  _m_: mark

  ^Kill^           ^Misc^                       ^Wrap^
  ^----^-----------^----^-----------------------^----^------------------
  _w_: copy        _j_: join                    _(_: wrap with ( )
  _k_: kill        _s_: split                   _{_: wrap with { }
  ^^               _t_: transpose               _'_: wrap with ' '
  ^^               _c_: convolute               _\"_: wrap with \" \"
  ^^               _i_: indent defun"
      ("q" nil)
      ;; Wrapping
      ("(" (lambda (a) (interactive "P") (sp-wrap-with-pair "(")))
      ("{" (lambda (a) (interactive "P") (sp-wrap-with-pair "{")))
      ("'" (lambda (a) (interactive "P") (sp-wrap-with-pair "'")))
      ("\"" (lambda (a) (interactive "P") (sp-wrap-with-pair "\"")))
      ;; Navigation
      ("f" sp-beginning-of-next-sexp)
      ("b" sp-beginning-of-previous-sexp)
      ("a" sp-beginning-of-sexp)
      ("e" sp-end-of-sexp)
      ("m" sp-mark-sexp)
      ;; Kill/copy
      ("w" sp-copy-sexp :exit t)
      ("k" sp-kill-sexp :exit t)
      ;; Misc
      ("t" sp-transpose-sexp)
      ("j" sp-join-sexp)
      ("c" sp-convolute-sexp)
      ("i" sp-indent-defun)
      ;; Depth changing
      ("R" sp-splice-sexp)
      ("r" sp-splice-sexp-killing-around)
      ("<up>" sp-splice-sexp-killing-backward)
      ("<down>" sp-splice-sexp-killing-forward)
      ;; Barfing/slurping
      ("s" sp-forward-slurp-sexp)
      ("S" sp-forward-barf-sexp)
      ("D" sp-backward-barf-sexp)
      ("d" sp-backward-slurp-sexp))

    (bind-key "M-<backspace>" 'sp-unwrap-sexp)
    (bind-key "C-c s" 'hydra-smartparens/body)
    )
#+END_SRC

** Expand-region

#+BEGIN_SRC emacs-lisp

  ;; Expand region with C-' and return to original position with C-g
  (use-package expand-region
    :init
    (defadvice keyboard-quit (before collapse-region activate)
      (when (memq last-command '(er/expand-region er/contract-region))
	(er/contract-region 0)))
    :bind 
    ("C-'" . er/expand-region)
    )

#+END_SRC

** Multiple-cursor

#+BEGIN_SRC emacs-lisp

  ;; Multi-cursor
  (use-package multiple-cursors
    :init
    ;; In case commands behavior is messy with multiple-cursors,
    ;; check your ~/.emacs.d/.mc-lists.el
    (defun mc/check-command-behavior ()
      "Open ~/.emacs.d/.mc-lists.el. 
  So you can fix the list for run-once and run-for-all multiple-cursors commands."
      (interactive)
      (find-file "~/.emacs.d/.mc-lists.el"))  
    :config
    (defhydra multiple-cursors-hydra (:columns 3 :idle 1.0)
      "Multiple cursors"
      ("l" mc/edit-lines "Edit lines in region" :exit t)
      ("b" mc/edit-beginnings-of-lines "Edit beginnings of lines in region" :exit t)
      ("e" mc/edit-ends-of-lines "Edit ends of lines in region" :exit t)
      ("a" mc/mark-all-like-this "Mark all like this" :exit t)
      ("S" mc/mark-all-symbols-like-this "Mark all symbols likes this" :exit t)
      ("w" mc/mark-all-words-like-this "Mark all words like this" :exit t)
      ("r" mc/mark-all-in-region "Mark all in region" :exit t)
      ("R" mc/mark-all-in-region-regexp "Mark all in region (regexp)" :exit t)
      ("i" (lambda (n) 
	     (interactive "nInsert initial number: ") 
	     (mc/insert-numbers n)) 
       "Insert numbers")
       ("s" mc/sort-regions "Sort regions")
       ("v" mc/reverse-regions "Reverse order")
       ("d" mc/mark-all-dwim "Mark all dwim")
       ("n" mc/mark-next-like-this "Mark next like this")
       ("N" mc/skip-to-next-like-this "Skip to next like this")
       ("M-n" mc/unmark-next-like-this "Unmark next like this")
       ("p" mc/mark-previous-like-this "Mark previous like this")
       ("P" mc/skip-to-previous-like-this "Skip to previous like this")
       ("M-p" mc/unmark-previous-like-this "Unmark previous like this")
       ("q" nil "Quit" :exit t))
 
    (global-set-key (kbd "C-c m") 'multiple-cursors-hydra/body)
    )


#+END_SRC

** Ace Window
[[https://github.com/abo-abo/ace-window][Ace-window]] makes it easy to navigate between windows.
Since I don't have the habit of using many windows, simple setup is enough.
#+BEGIN_SRC emacs-lisp

  (use-package ace-window
    :config
    ;; ace-window uses home row
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

    (defhydra window-hydra (:hint nil :color red)
      "
_[_ : Shrink window _]_ : Enlarge windows _=_ : Balance windows"
      ("[" shrink-window-horizontally)
      ("]" enlarge-window-horizontally)
      ("=" balance-windows :exit t)
      )
    
    :bind*
    (("M-p" . ace-window)
     ("C-x C-=" . window-hydra/body))
    )

#+END_SRC

** Eyebrowse

#+BEGIN_SRC emacs-lisp

  (use-package eyebrowse
    :config
    (setq eyebrowse-new-workspace t)

    (defhydra eyebrowse-hydra (:hint nil :color red)
      "
  Window Manager
  _0_ to _9_, _s_: Switch     _<left>_: Previous      _<right>_: Next
  _c_: Create             _C_: Close              _r_: Rename"
      ("q" nil :color blue)
      ("0" eyebrowse-switch-to-window-config-0)
      ("1" eyebrowse-switch-to-window-config-1)
      ("2" eyebrowse-switch-to-window-config-2)
      ("3" eyebrowse-switch-to-window-config-3)
      ("4" eyebrowse-switch-to-window-config-4)
      ("5" eyebrowse-switch-to-window-config-5)
      ("6" eyebrowse-switch-to-window-config-6)
      ("7" eyebrowse-switch-to-window-config-7)
      ("8" eyebrowse-switch-to-window-config-8)
      ("9" eyebrowse-switch-to-window-config-9)
      ("r" eyebrowse-rename-window-config :exit t)
      ("c" eyebrowse-create-window-config :exit t)
      ("s" eyebrowse-switch-to-window-config :exit t)
      ("C" eyebrowse-close-window-config :exit t)
      ("<left>" eyebrowse-prev-window-config)
      ("<right>" eyebrowse-next-window-config)
      )

    (eyebrowse-mode 1)

    :bind* ("C-c C-w" . eyebrowse-hydra/body)
  )
#+END_SRC
** Company
Company is a completion mechanism that is very flexible 

#+BEGIN_SRC emacs-lisp

    (use-package company
      :init
      ;; Activate globally
      (add-hook 'after-init-hook 'global-company-mode)
  
      ;; Press <F1> to show the documentation buffer and press C-<F1> to jump to it
      (defun my/company-show-doc-buffer ()
	"Temporarily show the documentation buffer for the selection."
	(interactive)
	(let* ((selected (nth company-selection company-candidates))
	       (doc-buffer (or (company-call-backend 'doc-buffer selected)
			       (error "No documentation available"))))
	  (with-current-buffer doc-buffer
	    (goto-char (point-min)))
	  (display-buffer doc-buffer t)))  
  
      :config
      ;; Some useful configs
      (setq company-selection-wrap-around t
	    company-tooltip-align-annotations t
	    company-tooltip-limit 10
	    company-idle-delay 0.5)

      ;; Add yasnippet support for all company backends
      ;; https://github.com/syl20bnr/spacemacs/pull/179
      (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

      (defun company-mode/backend-with-yas (backend)
	(if (or (not company-mode/enable-yas) (and (listp backend)    (member 'company-yasnippet backend)))
	    backend
	  (append (if (consp backend) backend (list backend))
		  '(:with company-yasnippet))))

      (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

      :bind 
      (:map company-active-map
	    ("C-<f1>" . my/company-show-doc-buffer)
	    ("C-n" . company-select-next)
	    ("C-p" . company-select-previous)
	    )
      )


#+END_SRC

** Electric operator
[[https://github.com/davidshepherd7/electric-operator][Electric Operator]] is an emacs minor-mode to automatically add spacing around operators.
#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :config
    (setq electric-operator-R-named-argument-style 'spaced)
    (add-hook 'ess-mode-hook #'electric-operator-mode)
    (add-hook 'python-mode-hook #'electric-operator-mode)
    
    (electric-operator-add-rules-for-mode 'ess-mode
					  (cons ":=" " := ")
					  )
    )

#+END_SRC
** Auto Highlight Symbol
**** TODO Remove some lesser used key in auto-highlight-symbol-mode-map to make room for other key bindind, make a hydra instead

#+BEGIN_SRC emacs-lisp

  (use-package auto-highlight-symbol
    :init (add-hook 'prog-mode-hook 'auto-highlight-symbol-mode)
    :config
    (setq ahs-idle-interval 1.0
	  ahs-default-range 'ahs-range-whole-buffer
	  ahs-inhibit-face-list '(font-lock-comment-delimiter-face
				  font-lock-comment-face
				  font-lock-doc-face))
    (set-face-attribute 'ahs-plugin-whole-buffer-face nil :background "#ffaf00")
    (set-face-attribute 'ahs-plugin-defalt-face nil :background "#afaf00")

    (unbind-key "M--" auto-highlight-symbol-mode-map)
    )

#+END_SRC
** Yasnippets
**** TODO There is some errors if yasnippets is not pre-installed, at least on window machine

#+BEGIN_SRC emacs-lisp

  ;; Enable Yasnippets
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    ;; It will test whether it can expand, if yes, cursor color -> green.
    (defun yasnippet-can-fire-p (&optional field)
      (interactive)
      (setq yas--condition-cache-timestamp (current-time))
      (let (templates-and-pos)
	(unless (and yas-expand-only-for-last-commands
		     (not (member last-command yas-expand-only-for-last-commands)))
	  (setq templates-and-pos (if field
				      (save-restriction
					(narrow-to-region (yas--field-start field)
							  (yas--field-end field))
					(yas--templates-for-key-at-point))
				    (yas--templates-for-key-at-point))))

	(set-cursor-color (if (and templates-and-pos (first templates-and-pos)) 
			      "#d65d0e" (face-attribute 'default :foreground)))))
    (add-hook 'post-command-hook 'yasnippet-can-fire-p)  

    (yas-global-mode 1)

    (yas-reload-all)
    :config
    (setq yas-snippet-dirs (format "%s/%s" config-directory "Snippets")
	  yas-fallback-behavior 'call-other-command)
    :bind*
    (("<C-tab>" . yas-insert-snippet)
     :map yas-minor-mode-map
     ("`" . yas-expand-from-trigger-key))
    )

  ;; With backquote warnings:
  ;; (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp

  (use-package helm
    :diminish helm-mode
    :init
    (helm-mode 1)
    :config
    (require 'helm-config)
    (global-unset-key (kbd "C-x c"))


    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	  helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source	.	
	  helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	  helm-ff-file-name-history-use-recentf t
	  helm-echo-input-in-header-line t 
	  helm-M-x-fuzzy-match t
	  helm-autoresize-max-height 0
	  helm-autoresize-min-height 30)

    (helm-autoresize-mode 1)

    :bind-keymap
    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    ("C-c h" . helm-command-prefix)  
    :bind (
	   ("C-x b" . helm-buffers-list)
	   ("M-x" . helm-M-x)
	   ("C-x C-f" . helm-find-files)
	   ("M-y" . helm-show-kill-ring)
	   :map helm-map
	   ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
	   ("C-i" . helm-execute-persistent-action)   ; make TAB work in terminal
	   ("M-x" . helm-select-action)              ; list actions using C-z    
	   )
    :diminish helm-mode
    )


  (setq helm-full-frame nil)
  ;; Use "C-:" to switch to Helm interface during company-ing
  (use-package helm-company
    :config
    (eval-after-load 'company
      '(progn
	 (define-key company-mode-map (kbd "C-:") 'helm-company)
	 (define-key company-active-map (kbd "C-:") 'helm-company)))    
    )

  ;; Helm-bibtex
  (use-package helm-bibtex
    :config
    ;; Set bib folder
    (setq bibtex-completion-bibliography
	  (expand-file-name "~/Dropbox/references.bib"))
    (setq bibtex-completion-library-path
	  (append (f-directories "~/Dropbox" nil t)
		  (f-directories "~/Documents" nil t)))
    ;; Set display format    
    (setq bibtex-completion-display-formats
	  '((article       . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${journal:40}")
	    (inbook        . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	    (incollection  . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (t             . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*}")))

    (setq bibtex-completion-cite-default-command "textcite")
    :bind(
	  :map helm-command-map
	       ("b" . helm-bibtex)
	       )
    )

  (helm-autoresize-mode t)


#+end_SRC

** Polymode

#+BEGIN_SRC emacs-lisp
   
  (use-package polymode
    :diminish (poly-org-mode
	       poly-markdown-mode
	       poly-noweb+r-mode
	       poly-noweb+r-mode
	       poly-markdown+r-mode
	       poly-rapport-mode
	       poly-html+r-mode
	       poly-brew+r-mode
	       poly-r+c++-mode
	       poly-c++r-mode)
    :init 
    (require 'poly-R)
    (require 'poly-markdown)
    
    :mode (
	   ;; ("\\.org" . poly-org-mode)
	   ("\\.md" . poly-markdown-mode)
	   ("\\.Snw$" . poly-noweb+r-mode)
	   ("\\.Rnw$" . poly-noweb+r-mode)
	   ("\\.Rmd$" . poly-markdown+r-mode)
	   ("\\.rapport$" . poly-rapport-mode)
	   ("\\.Rhtml$" . poly-html+r-mode)
	   ("\\.Rbrew$" . poly-brew+r-mode)
	   ("\\.Rcpp$" . poly-r+c++-mode)
	   ("\\.cppR$" . poly-c++r-mode))
    :config
    (setq polymode-exporter-output-file-format "%s")
    )
  
#+END_SRC

* Directories and Files
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :config
    (set-face-attribute 'diredp-dir-name nil :foreground "#fe8019")
    (set-face-attribute 'diredp-number nil :foreground "#8ec07c")
    (setq dired-listing-switches "-alh")
    )
#+END_SRC
** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    (setq projectile-mode-line '(:eval (format " 𝐏[%s]" (projectile-project-name))))
    )

  ;; Helm-projectile
  (use-package helm-projectile
    :config 
    (helm-projectile-on))


  
#+END_SRC

** Ag and Wgrep
Ag is an Emacs frontend to The Silver Searcher [[http://agel.readthedocs.org/en/latest/][(Documentation)]]

#+BEGIN_SRC emacs-lisp

  (use-package ag
    :init
    ;; Truncate long results
    (add-hook 'ag-mode-hook (lambda () (setq truncate-lines t)))
  
    :config
    ;; Add highlighting
    (setq ag-highlight-search t)

    ;; Set ag to reuse the same buffer
    (setq ag-reuse-buffers nil)
    )
  

  (use-package wgrep-ag
    :config
    ;; wgrep-ag allows you to edit a ag buffer and apply those changes to
    ;; the file buffer. 
    (autoload 'wgrep-ag-setup "wgrep-ag")
    (setq wgrep-auto-save-buffer t)
    (add-hook 'ag-mode-hook 'wgrep-ag-setup)
    )

#+END_SRC

* Utilities
** Org-mode
Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.
See [[http://orgmode.org/][here]].
*** Setting up

#+BEGIN_SRC emacs-lisp

  (use-package org
    :config
    ;; Word-wrap
    ;; (add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))

    ;; Omit the headline-asterisks except the last one:
    (setq org-hide-leading-stars t)

    ;; Hide emphasis markers
    ;; (setq org-hide-emphasis-markers t)

    ;; Enable shift selection
    (setq org-support-shift-select t)

    ;; Fontification
    (set-face-attribute 'org-level-1 nil :weight 'bold :height 120)
    (set-face-attribute 'org-level-2 nil :weight 'bold)
    (set-face-attribute 'org-block-begin-line nil :foreground "#d5c4a1")
    (set-face-attribute 'org-block-end-line nil :foreground "#d5c4a1")


    (set-face-attribute 'org-block nil :background
			(color-lighten-name
			 (face-attribute 'default :background) 2))


    (font-lock-add-keywords 'org-mode
			    '(("^ +\\([-*]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    )

#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
  ;; Org agenda folders
  (setq org-agenda-files '("~/Dropbox/org"))

  ;; Set monday as the start of the week
  (setq org-agenda-start-on-weekday 1)

  ;; Org keyword
  (setq org-todo-keywords
	'((sequence "TODO" "|" "DONE" "SUSPENDED")
	  (sequence "PLANNING" "|" "OVER")
	  ))
  
  (setq org-todo-keyword-faces
	'(("TODO" . "yellow") ("DONE" . "green") ("SUSPENDED" . "gray50")
	  ("PLANNING" . "light blue") ("OVER" . "slate gray")))

  ;; Agenda summary 
  (setq org-agenda-custom-commands
	'(("c" "Simple agenda view"
	   ((agenda "")
	    (alltodo "")))))
  ;; And bind it to <f8>
  (global-set-key (kbd "<f8>") 'org-agenda)
  
#+END_SRC
*** Org-ref

#+BEGIN_SRC emacs-lisp
    (use-package org-ref
      :after org
      :config
      (setq org-ref-default-bibliography
	  (expand-file-name "~/Dropbox/references.bib")))
#+END_SRC
*** Org-babel
Babel is Org-mode's ability to execute source code within Org-mode documents.

#+BEGIN_SRC emacs-lisp

  ;; Active Babel languages:
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (latex . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (plantuml . t)
     ))

  ;; Indent normally in source code
  (setq org-src-tab-acts-natively t)

  ;; Fontification in org source block
  (setq org-src-fontify-natively t)

  ;; Show inline images
  (setq org-startup-with-inline-images t)

  ;; Inhibit execute messages
  (setq org-confirm-babel-evaluate nil)

#+END_SRC

*** Org_exports

#+BEGIN_SRC emacs-lisp
  (use-package ox-latex
    :ensure org
    :config
    ;; Highlight code blocks in org-latex-export-to-pdf
    ;; Minted options can be found in:
    ;; http://mirror.kku.ac.th/CTAN/macros/latex/contrib/minted/minted.pdf
    (setq org-latex-listings 'minted
	  org-latex-packages-alist '(("" "minted"))
	  org-latex-minted-options '(("breaklines" "true")
				     ("breakanywhere" "true")
				     ("mathescape")
				     ;; ("linenos" "true")
				     ;; ("firstnumber" "last")
				     ("frame" "lines")
				     ("bgcolor" "yellow!5")
				     ;; ("framesep" "2mm")
				     )
	  org-latex-pdf-process
	  '("latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o -f %f")
	  )

    ;; Default packages
    (setq org-latex-default-packages-alist
	'(("AUTO" "inputenc" t
	   ("pdflatex"))
	  ("T1" "fontenc" t
	   ("pdflatex"))
	  ("" "graphicx" t)
	  ("" "grffile" t)
	  ("" "longtable" nil)
	  ("" "wrapfig" nil)
	  ("" "rotating" nil)
	  ("normalem" "ulem" t)
	  ("" "amsmath" t)
	  ("" "textcomp" t)
	  ("" "amssymb" t)
	  ("" "capt-of" nil)
	  ("dvipsnames" "xcolor" nil)
	  ("colorlinks=true, linkcolor=Blue, citecolor=BrickRed, urlcolor=PineGreen" "hyperref" nil)
	  ("" "indentfirst" nil))
	)


    ;; Writing latex in org-mode
    (add-hook 'org-mode-hook 'org-cdlatex-mode)

    ;; Add KOMA-scripts classes to org export
    (add-to-list 'org-latex-classes
		 '("koma-article" "\\documentclass{scrartcl}"
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
		 '("koma-report" "\\documentclass{scrreprt}"
		   ("\\part{%s}" . "\\part*{%s}")
		   ("\\chapter{%s}" . "\\chapter*{%s}")
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    (add-to-list 'org-latex-classes
		 '("koma-book" "\\documentclass[11pt]{scrbook}"
		   ("\\part{%s}" . "\\part*{%s}")
		   ("\\chapter{%s}" . "\\chapter*{%s}")
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    )

  (use-package ox-beamer
    :ensure org
    )

  (use-package ox-reveal
    :ensure org
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    )

  (use-package htmlize
    :after ox-reveal)
#+END_SRC
** Pdf-tools 
PDF Tools is, among other things, a replacement of DocView for PDF files. 
The key difference is, that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :init 
    (pdf-tools-install)
    :config
    (setq pdf-view-display-size "fit-page"
	  auto-revert-interval 0
	  ess-pdf-viewer-pref "emacsclient"
	  TeX-view-program-selection '((output-pdf "PDF Tools"))
	  pdf-view-midnight-colors '("#ffffc8" . "#1d2021"))
    )
  
#+END_SRC

** Nov.el

#+BEGIN_SRC emacs-lisp
  (use-package nov
    :config
    (defun my-nov-font-setup ()
      (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
			       :height 1.2))
    (add-hook 'nov-mode-hook 'my-nov-font-setup)
    )
#+END_SRC
** Magit
Magit is an interface to the version control system Git, implemented as an Emacs package. 
Magit aspires to be a complete Git porcelain. [[https://magit.vc/][See here]]

#+BEGIN_SRC emacs-lisp

  (use-package magit
    :bind
    ;; Set magit-status to F9
    ("<f9>" . magit-status)
    )

    ;; Currently magit cause some error when auto revert mode is on
    (setq magit-auto-revert-mode nil)

#+END_SRC  

** Elfeed

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package elfeed
    :defer t
    :config
    (setq elfeed-use-curl t)
    (setq elfeed-search-filter "@3-days-ago")
    (setq elfeed-db-directory "~/Dropbox/Emacs/db.elfeed")
    (add-hook 'elfeed-show-mode-hook (lambda () (visual-line-mode 1)))

    :commands elfeed
    :bind 
    ("C-x w" . elfeed)
    )

  (use-package elfeed-goodies
    :after elfeed
    :config
    (elfeed-goodies/setup)
    )

  ;; elfeed-org allows you to organize elfeed with org
  (use-package elfeed-org
    :after elfeed
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files 
	  (list "~/Dropbox/org/elfeed.org"))
    )
#+END_SRC

** Paradox
[[https://github.com/Malabarba/paradox][Paradox]] is a project for modernizing Emacs' Package Menu. With improved appearance, mode-line information. Github integration, customizability, asynchronous upgrading, and more.

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :config
    (paradox-enable)
    (setq-default
     paradox-column-width-package 27
     paradox-column-width-version 13
     paradox-execute-asynchronously t
     paradox-github-token t)
    )
#+END_SRC

** Ibuffer
Ibuffer is an advanced replacement for BufferMenu, which lets you operate on buffers much in the same manner as Dired.
#+BEGIN_SRC emacs-lisp
 (use-package ibuffer
   :config
   (setq ibuffer-saved-filter-groups
	 (quote (("Default"
		  ("Dired" (mode . dired-mode))
		  ("Org" (name . "^.*org$"))
		  ("Process" (or (mode . inferior-ess-mode)
				 (mode . shell-mode)))
		  ("Programming" (or
				  (mode . ess-mode)
				  (mode . python-mode)
				  (mode . c++-mode)))
		  ("Helm" (mode . Hmm-mode))
		  ("Emacs" (or
			    (name . "^\\*scratch\\*$")
			    (name . "^\\*Messages\\*$")
			    (name . "^\\*dashboard\\*$")))
		  ))))
   
   (add-hook 'ibuffer-mode-hook
	     (lambda ()
	       (ibuffer-auto-mode 1)
	       (ibuffer-switch-to-saved-filter-groups "default")))

   ;; Don't show filter groups if there are no buffers in that group
   (setq ibuffer-show-empty-filter-groups nil)

   :bind
   ("C-x C-b" . ibuffer))

#+END_SRC

** Which-key
[[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode 1)
    )

#+END_SRC

** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode ("\\.json\\'" . json-mode)
    )

  (use-package json-navigator
    :after json-mode
    )

#+END_SRC
* Languages
** R
*** Setting up
#+BEGIN_SRC emacs-lisp

  (use-package ess-site
    :ensure ess
    :init
    ;; Auto set width and length options when initiate new Ess processes
    (add-hook 'ess-post-run-hook 'ess-execute-screen-options)
    )

#+END_SRC

*** Appearance
#+BEGIN_SRC emacs-lisp

  ;; ;; Truncate long lines
  ;; (add-hook 'special-mode-hook (lambda () (setq truncate-lines t)))
  ;; (add-hook 'inferior-ess-mode-hook (lambda () (setq truncate-lines t)))
  ;; (add-hook 'ess-mode-hook (lambda () (setq truncate-lines t)))

  ;; ;; Indentation style
  (setq ess-default-style 'DEFAULT)

  ;; ESS syntax highlight  
  (setq ess-R-font-lock-keywords 
	'((ess-R-fl-keyword:modifiers . t)
	  (ess-R-fl-keyword:fun-defs . t)
	  (ess-R-fl-keyword:keywords . nil)
	  (ess-R-fl-keyword:assign-ops . t)
	  (ess-R-fl-keyword:constants . t)
	  (ess-fl-keyword:fun-calls . t)
	  (ess-fl-keyword:numbers . t)
	  (ess-fl-keyword:operators . t)
	  (ess-fl-keyword:delimiters . t)
	  (ess-fl-keyword:= . t)
	  (ess-R-fl-keyword:F&T . t)
	  )
	)


  (setq inferior-ess-r-font-lock-keywords 
	'((ess-S-fl-keyword:prompt . t)
	  (ess-R-fl-keyword:messages . t)
	  (ess-R-fl-keyword:modifiers . t)
	  (ess-R-fl-keyword:fun-defs . t)
	  (ess-R-fl-keyword:keywords . nil)
	  (ess-R-fl-keyword:assign-ops . t)
	  (ess-R-fl-keyword:constants . t)
	  (ess-fl-keyword:matrix-labels . t)
	  (ess-fl-keyword:fun-calls . nil)
	  (ess-fl-keyword:numbers . nil)
	  (ess-fl-keyword:operators . t)
	  (ess-fl-keyword:delimiters . nil)
	  (ess-fl-keyword:= . t)
	  (ess-R-fl-keyword:F&T . nil))
	 )

  (set-face-attribute 'ess-numbers-face nil :foreground "#8ec07c")
  ;; Disable IDO so helm is used instead
  (setq ess-use-ido nil)

#+END_SRC
*** Code completion
#+BEGIN_SRC emacs-lisp

  (setq ess-use-company 'script-only)
  (setq ess-tab-complete-in-script t)	;; Press <tab> inside functions for completions


#+END_SRC

*** Functions and key bindind
#+BEGIN_SRC emacs-lisp
  ;; Describe object
  (setq ess-R-describe-object-at-point-commands
  	'(("str(%s)")
  	  ("options(tibble.print_max = Inf);skimr::skim(%s);options(tibble.print_max = Inf)")
  	  ("summary(%s, maxsum = 20)")))

  (define-key ess-doc-map (kbd "C-r") 'ess-rdired)
  (define-key ess-doc-map (kbd "r") 'ess-rdired)

  ;; Returm C-c h as prefix to Helm"
  (defun ess-map-control-h-to-helm ()
    "Return C-c h to helm prefix instead of ess-handy-commands"
    (interactive)
    (local-unset-key (kbd "C-c h"))
    (local-set-key (kbd "C-c h") 'helm-command-prefix))

  (add-hook 'ess-mode-hook 'ess-map-control-h-to-helm)

  ;; Remap "<-" key to M-- instead of smart bind to "_"
  (ess-toggle-underscore nil)
  (define-key ess-mode-map (kbd "M--") 'ess-smart-S-assign)
  (define-key inferior-ess-mode-map (kbd "M--") 'ess-smart-S-assign)

  ;; Hot key C-S-m for pipe operator in ESS
  ;; Temporary removed and use Yasnippet instead
  (defun then_R_operator ()
    "R - %>% operator or 'then' pipe operator"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (just-one-space 1))

  (define-key ess-mode-map (kbd "C-S-m") 'then_R_operator)
  (define-key inferior-ess-mode-map (kbd "C-S-m") 'then_R_operator)



  (defun ess-rmarkdown ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
	(ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
	(let* ((sprocess (ess-get-process ess-current-process-name))
	       (sbuffer (process-buffer sprocess))
	       (buf-coding (symbol-name buffer-file-coding-system))
	       (R-cmd
		(format "library(rmarkdown); rmarkdown::render(\"%s\")"
			buffer-file-name)))
	  (message "Running rmarkdown on %s" buffer-file-name)
	  (ess-execute R-cmd 'buffer nil nil)
	  (switch-to-buffer rmd-buf)
	  (ess-show-buffer (buffer-name sbuffer) nil)))))

  (define-key polymode-mode-map "\M-ns" 'ess-rmarkdown)

  (defun ess-rshiny ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
	(ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
	(let* ((sprocess (ess-get-process ess-current-process-name))
	       (sbuffer (process-buffer sprocess))
	       (buf-coding (symbol-name buffer-file-coding-system))
	       (R-cmd
		(format "library(rmarkdown);rmarkdown::run(\"%s\")"
			buffer-file-name)))
	  (message "Running shiny on %s" buffer-file-name)
	  (ess-execute R-cmd 'buffer nil nil)
	  (switch-to-buffer rmd-buf)
	  (ess-show-buffer (buffer-name sbuffer) nil)))))

  (define-key polymode-mode-map "\M-nr" 'ess-rshiny)

#+END_SRC

** Stan
[[https://github.com/stan-dev/stan-mode][stan-mode]] is the Emacs mode for [[http://mc-stan.org/][Stan]].

#+BEGIN_SRC emacs-lisp
  (use-package stan-mode
    )

  (use-package stan-snippets
    )
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp

  (setq python-shell-interpreter "ipython3")
  (setq python-shell-interpreter-args "--pprint --colors=Linux")

  (use-package elpy
    :init
    ;; Truncate long line in inferior mode
    (add-hook 'inferior-python-mode-hook (lambda () (setq truncate-lines t)))
    ;; Enable company
    (add-hook 'python-mode-hook 'company-mode)
    (add-hook 'inferior-python-mode-hook 'company-mode)
    ;; Enable highlight indentation
    (add-hook 'highlight-indentation-mode-hook 
	      'highlight-indentation-current-column-mode)
    ;; Enable elpy
    (elpy-enable)
    :config
    ;; Do not enable elpy flymake for now
    (remove-hook 'elpy-modules 'elpy-module-flymake)
    (remove-hook 'elpy-modules 'elpy-module-highlight-indentation)

    ;; The old `elpy-use-ipython' is obseleted, see:
    ;; https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup
    (setq python-shell-interpreter "ipython"
	  python-shell-interpreter-args "-i --simple-prompt")

    (setq elpy-rpc-python-command "python3")

    ;; Completion backend
    (setq elpy-rpc-backend "rope")

    ;; Function: send block to elpy: bound to C-c C-c
    (defun forward-block (&optional n)
      (interactive "p")
      (let ((n (if (null n) 1 n)))
	(search-forward-regexp "\n[\t\n ]*\n+" nil "NOERROR" n)))

    (defun elpy-shell-send-current-block ()
      (interactive)
      (beginning-of-line)
      "Send current block to Python shell."
      (push-mark)
      (forward-block)
      (elpy-shell-send-region-or-buffer)
      (display-buffer (process-buffer (elpy-shell-get-or-create-process))
		      nil
		      'visible))

    ;; Font-lock
    (add-hook 'python-mode-hook
      '(lambda()
	 (font-lock-add-keywords
	  nil
	  '(("\\<\\([_A-Za-z0-9]*\\)(" 1
	     font-lock-function-name-face) ; highlight function names
	    ))))

    :bind
    (:map python-mode-map
	  ("C-c <RET>" . elpy-shell-send-region-or-buffer)
	  ("C-c C-c" . elpy-send-current-block))
    )


#+END_SRC

** SQL

#+BEGIN_SRC emacs-lisp
  
  (use-package sql
    :config
    ;; Use a more friendly keyword face
    (copy-face 'font-lock-keyword-face 'sql-keyword-face)
    (set-face-attribute 'sql-keyword-face nil 
			:foreground "#fabd2f"
			:weight 'bold)
    (add-hook 'sql-mode-hook (lambda ()
			       (set (make-local-variable 'font-lock-keyword-face)
				    'sql-keyword-face)))
    
    )

  ;; Upcase sql keywords
  (use-package sqlup-mode
    :diminish sqlup-mode
    :init
    ;; Capitalize keywords in SQL mode
    (add-hook 'sql-mode-hook 'sqlup-mode)
    ;; Capitalize keywords in an interactive session (e.g. psql)
    (add-hook 'sql-interactive-mode-hook 'sqlup-mode)
    )

#+END_SRC
** LaTeX
*** AUCTeX
    
#+BEGIN_SRC emacs-lisp

  (use-package latex 
    :ensure auctex
    :config
    (setq TeX-master nil
	  TeX-auto-save t			    
	  TeX-parse-self t
	  TeX-PDF-mode t	    
	  TeX-electric-escape t
	  )

    ;; Turn on RefTeX in AUCTeX
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

    ;; Reftex default bibfile
    (setq reftex-default-bibliography
	  (expand-file-name "~/Dropbox/references.bib"))

    ;; Activate nice interface between RefTeX and AUCTeX
    (setq reftex-plug-into-AUCTeX t)

    ;; Word-wrap
    (add-hook 'TeX-mode-hook (lambda () (visual-line-mode 1)))
    )

  ;; Completion
  (use-package company-auctex
    :init
    (company-auctex-init)
    )

#+END_SRC

*** CDLaTex
CDLaTeX is a minor mode for Emacs supporting fast insertion of environment templates and math stuff in LaTeX. 
For more information see [[https://github.com/cdominik/cdlatex][here]]

#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
    )
#+END_SRC

** Markdown

   #+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  :config
  (defun markdown-insert-code-chunk (header) 
    "Insert an code chunk in markdown mode. Necessary due to interactions between polymode and yas snippet" 
    (interactive "sChunk header: ") 
    (insert (concat "```{" header "}\n\n```")) 
    (forward-line -1))
  :bind
  (:map markdown-mode-map
   ("C-c i" . markdown-insert-code-chunk))
  )


#+END_SRC
** ELisp
Customisation to emacs-lisp itself, this is mainly syntax highlighting
#+BEGIN_SRC emacs-lisp

 (use-package highlight-defined
   :config
   (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode)
    )
 
 (use-package highlight-quoted
   :config
   (add-hook 'emacs-lisp-mode-hook 'highlight-quoted-mode)
   (set-face-attribute 'highlight-quoted-symbol nil
		       :inherit 'font-lock-string-face))
  
#+END_SRC
** Shell

#+BEGIN_SRC emacs-lisp

  ;; Keybinding for terminal
  ;; (global-set-key [f2] 'eshell)

  ;; Company
  (use-package company-shell
    :config
    (add-to-list 'company-backends '(company-shell company-shell-env company-fish-shell))
    )

#+END_SRC

** Web

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-current-element-highlight t)
    (set-face-attribute 'web-mode-current-element-highlight-face nil
			:weight 'bold
			:background "#665c54")
    )

  (use-package web-beautify
    :config
    :bind (:map web-mode-map
		("C-c b" . web-beautify-html)
	   :map css-mode-map
	        ("C-c b". web-beautify-css))
    )

#+END_SRC
** GNUplot
Gnuplot is a portable command-line driven graphing utility for Linux, OS/2, MS Windows, OSX, VMS, and many other platforms.


#+BEGIN_SRC emacs-lisp

  (use-package gnuplot-mode
    :mode ("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)
    )

#+END_SRC

** Plantuml
[[http://plantuml.com/][PlantUML]] is a component that allows to quickly write different kinds of diagrams

#+BEGIN_SRC emacs-lisp
    (use-package plantuml-mode
      :mode ("\\.plantuml\\'" . plantuml-mode)
      :config
      ;; Path to jar file, remember to put it in the right folder
      (setq plantuml-jar-path (expand-file-name "~/Java/plantuml.jar"))
      ;; Add a command to render current buffer
      (defun plantuml-render-this-file ()
	(interactive)
	(shell-command
	 (concat
	  "java -jar "
	  plantuml-jar-path
	  " " buffer-file-name
	  " -charset UTF-8 -t"
	  (completing-read "PlantUML output: " '("svg" "png" "pdf" "latex"))
	  ))
	)
      :bind (:map plantuml-mode-map
		  ("C-c C-r" . plantuml-render-this-file))
      )

    (use-package ob-plantuml
      :ensure org
      :config
      (setq org-plantuml-jar-path (expand-file-name "~/Java/plantuml.jar"))
      )


#+END_SRC

* Writing
This part of Emacs is mostly for text-derived modes, mainly for normal (English) text writings.

** Spell checking


#+BEGIN_SRC emacs-lisp
  
  ;; Use flyspell for English spell-checking
  (use-package flyspell
    :config
    ;; (add-hook 'text-mode-hook 'flyspell-mode)
    (set-face-attribute 'flyspell-duplicate nil :underline "DeepPink")
    (set-face-attribute 'flyspell-incorrect nil :underline "Red1")
    :diminish flyspell-mode
    )

  (use-package ispell)

#+END_SRC

** Grammar checking

#+BEGIN_SRC emacs-lisp
  
  ;; (use-package langtool
  ;;   :config
  ;;   ;; Set path to the Java tool
  ;;   (setq langtool-language-tool-jar 
  ;; 	  "~/Java/LanguageTool-3.8/languagetool-commandline.jar")
  ;;   ;; Show messages as pop-up
  ;;   (defun langtool-autoshow-detail-popup (overlays)
  ;;     (when (require 'popup nil t)
  ;; 	(unless (or popup-instances
  ;; 		    (memq last-command '(keyboard-quit)))
  ;; 	  (let ((msg (langtool-details-error-message overlays)))
  ;; 	    (popup-tip msg)))))
  ;;   (setq langtool-autoshow-message-function
  ;; 	  'langtool-autoshow-detail-popup)
  ;;   )


  ;; (use-package writegood-mode
  ;;   :config
  ;;   (set-face-attribute 'writegood-duplicates-face nil :underline "DeepPink")
  ;;   (set-face-attribute 'writegood-passive-voice-face nil :underline "Cyan")
  ;;   (set-face-attribute 'writegood-weasels-face nil :underline "DarkOrange")
  ;;   (add-hook 'text-mode-hook 'writegood-mode)
  ;;   :diminish writegood-mode
  ;;   )


  (use-package flycheck
    :diminish flycheck-mode
    )

  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
	      (id (one-or-more (not (any " "))))
	      (message) line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))

  (add-to-list 'flycheck-checkers 'proselint)

  ;; (add-hook 'markdown-mode-hook 'flycheck-mode)
  ;; (add-hook 'text-mode-hook 'flycheck-mode)


  (use-package flycheck-pos-tip
    :diminish flycheck-pos-tip-mode
    :config
    (with-eval-after-load 'flycheck
      (flycheck-pos-tip-mode))
    )

#+END_SRC

** Dictionary
#+BEGIN_SRC emacs-lisp

  (use-package define-word
    :bind
    (:map pdf-view-mode-map
	  ("l" . define-word)
     :map nov-mode-map
	  ("l" . define-word))
    )

 #+END_SRC
* Fun
** Dad Jokes

#+BEGIN_SRC emacs-lisp
  ;; This require pos-tip.el
  (require 'pos-tip)

  (defun dad-joke ()
    (interactive)
    (pos-tip-show
     (shell-command-to-string "curl -s https://icanhazdadjoke.com/")))

  (run-with-idle-timer (* 60 5) t 'dad-joke)
#+END_SRC

** Fortunes

#+BEGIN_SRC emacs-lisp
  ;; Supply a random fortune cookie as the *scratch* message.
  (defun fortune-scratch-message ()
    (interactive)
    (let ((fortune
	   (when (and (executable-find "fortune")
		      (executable-find "cowsay"))
	     (with-temp-buffer
	       (shell-command "fortune | cowsay" t)
	       (let ((comment-start ";;"))
		 (comment-region (point-min) (point-max)))
	       (delete-trailing-whitespace (point-min) (point-max))
	       (concat (buffer-string) "\n")))))
      (if (called-interactively-p 'any)
	  (insert fortune)
	fortune)))

  ;; initial-scratch-message
  (let ((fortune (fortune-scratch-message)))
    (when fortune
      (setq initial-scratch-message fortune)))
#+END_SRC
* Draft
Settings in this section are not yet organized but are being used, mostly for testing purposes

** Org-bullets

#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
    :hook 
    (org-mode . org-bullets-mode)
    )

#+END_SRC
